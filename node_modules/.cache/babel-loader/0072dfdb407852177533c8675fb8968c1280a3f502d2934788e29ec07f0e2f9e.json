{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\'NEO'\\\\Desktop\\\\tdp darbs\\\\Frontend\\\\frontend_dala\\\\src\\\\components\\\\forms\\\\SignUpForm.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { FormikForm } from './FormikForm';\nimport * as yup from 'yup';\nimport { FormInput } from './inputs/FormInput';\nimport { api } from '../../config/request';\nimport { processServerErrors, signupErrors } from '../../config/serverErrors';\nimport { CiMail } from 'react-icons/ci';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SignUpForm = () => {\n  _s();\n  const [generalError, setGeneralError] = React.useState(null);\n  const [success, setSuccess] = React.useState(false);\n  const initialValues = {\n    email: '',\n    username: '',\n    password: '',\n    confirmPassword: ''\n  };\n  const validationSchema = {\n    email: yup.string().email('Email must be a valid email address').required('Email is required'),\n    username: yup.string().min(3, 'Username must be at least 3 characters').max(20, 'Username must be at most 20 characters').required('Username is required'),\n    password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n    confirmPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required('Passwords must match')\n  };\n  const onSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    setGeneralError(null);\n    api.post('/signup', {\n      email: values.email,\n      username: values.username,\n      password: values.password,\n      c_password: values.confirmPassword\n    }).then(() => {\n      setSuccess(true);\n      actions.setSubmitting(false);\n    }).catch(err => {\n      const serverError = processServerErrors(err, actions, setGeneralError, signupErrors);\n      if (!serverError) {\n        setGeneralError(signupErrors['REGISTER_ERROR'].msg);\n      }\n      actions.setSubmitting(false);\n    });\n  };\n  const renderForm = () => {\n    if (success) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(CiMail, {\n          className: \"block mx-auto text-7xl text-gray-700 -mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold text-success mb-2\",\n          children: \"Success!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: \"You have successfully registered. Please check your email to verify your account.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(FormikForm, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: onSubmit,\n        submitText: \"Sign Up\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6 flex flex-col gap-y-3\",\n          children: [/*#__PURE__*/_jsxDEV(SignUpField, {\n            name: \"email\",\n            type: \"email\",\n            label: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SignUpField, {\n            name: \"username\",\n            type: \"text\",\n            label: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SignUpField, {\n            name: \"password\",\n            type: \"password\",\n            label: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SignUpField, {\n            className: \"mb-2\",\n            name: \"confirmPassword\",\n            type: \"password\",\n            label: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), generalError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 text-center font-semibold\",\n          children: generalError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  return renderForm();\n};\n_s(SignUpForm, \"KzX37U8uhmHKPb+v/NRcBIGTKs0=\");\n_c = SignUpForm;\nconst SignUpField = _ref => {\n  let {\n    name,\n    type,\n    label,\n    className\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(FormInput, {\n    name: name,\n    placeholder: label,\n    containerClassName: `flex flex-col gap-y-1 ${className}`,\n    labelClassName: \"text-gray-600 font-semibold\",\n    inputClassName: `border-2 rounded px-4 py-2 w-full focus:outline-none focus:ring-1`,\n    label: label,\n    type: type,\n    required: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_c2 = SignUpField;\nvar _c, _c2;\n$RefreshReg$(_c, \"SignUpForm\");\n$RefreshReg$(_c2, \"SignUpField\");","map":{"version":3,"names":["React","FormikForm","yup","FormInput","api","processServerErrors","signupErrors","CiMail","SignUpForm","generalError","setGeneralError","useState","success","setSuccess","initialValues","email","username","password","confirmPassword","validationSchema","string","required","min","max","oneOf","ref","onSubmit","values","actions","setSubmitting","post","c_password","then","catch","err","serverError","msg","renderForm","SignUpField","name","type","label","className"],"sources":["C:/Users/'NEO'/Desktop/tdp darbs/Frontend/frontend_dala/src/components/forms/SignUpForm.tsx"],"sourcesContent":["import React from 'react';\r\nimport { FormikForm } from './FormikForm';\r\nimport * as yup from 'yup';\r\nimport { FormInput } from './inputs/FormInput';\r\nimport { api } from '../../config/request';\r\nimport { processServerErrors, signupErrors } from '../../config/serverErrors';\r\nimport { CiMail } from 'react-icons/ci';\r\n\r\nexport const SignUpForm = () => {\r\n\r\n    const [generalError, setGeneralError] = React.useState<string | null>(null);\r\n    const [success, setSuccess] = React.useState<boolean>(false);\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    }\r\n\r\n    const validationSchema = {\r\n        email: yup\r\n            .string()\r\n            .email('Email must be a valid email address')\r\n            .required('Email is required'),\r\n        username: yup\r\n            .string()\r\n            .min(3, 'Username must be at least 3 characters')\r\n            .max(20, 'Username must be at most 20 characters')\r\n            .required('Username is required'),\r\n        password: yup\r\n            .string()\r\n            .min(6, 'Password must be at least 6 characters')\r\n            .required('Password is required'),\r\n        confirmPassword: yup\r\n            .string()\r\n            .oneOf([yup.ref('password'), null], 'Passwords must match')\r\n            .required('Passwords must match')\r\n    }\r\n\r\n    const onSubmit = (values: any, actions: any) => {\r\n        actions.setSubmitting(true);\r\n        setGeneralError(null);\r\n\r\n        api.post('/signup', {\r\n            email: values.email,\r\n            username: values.username,\r\n            password: values.password,\r\n            c_password: values.confirmPassword\r\n        }).then(() => {\r\n            setSuccess(true);\r\n            actions.setSubmitting(false);\r\n        }).catch((err) => {\r\n            const serverError = processServerErrors(err, actions, setGeneralError, signupErrors);\r\n            if (!serverError) {\r\n                setGeneralError(signupErrors['REGISTER_ERROR' as keyof typeof signupErrors].msg);\r\n            }\r\n            actions.setSubmitting(false);\r\n        });\r\n    }\r\n\r\n    const renderForm = () => {\r\n        if (success) {\r\n            return (\r\n                <div className=\"text-center mt-4\">\r\n                    <CiMail className=\"block mx-auto text-7xl text-gray-700 -mb-2\" />\r\n                    <p className=\"text-3xl font-bold text-success mb-2\">Success!</p>\r\n                    <p className=\"text-gray-600\">You have successfully registered. Please check your email to verify your account.</p>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <FormikForm\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={onSubmit}\r\n                    submitText=\"Sign Up\"\r\n\r\n                >\r\n                    <div className=\"mt-6 flex flex-col gap-y-3\">\r\n                        <SignUpField name=\"email\" type=\"email\" label=\"Email\" />\r\n                        <SignUpField name=\"username\" type=\"text\" label=\"Username\" />\r\n                        <SignUpField name=\"password\" type=\"password\" label=\"Password\" />\r\n                        <SignUpField className=\"mb-2\" name=\"confirmPassword\" type=\"password\" label=\"Confirm Password\" />\r\n                    </div>\r\n                    {generalError && <div className=\"text-red-500 text-center font-semibold\">{generalError}</div>}\r\n                </FormikForm>\r\n            );\r\n        }\r\n    }\r\n\r\n    return renderForm();\r\n};\r\n\r\nconst SignUpField = ({ name, type, label, className }: SignUpFieldProps) => {\r\n    return (\r\n        <FormInput\r\n            name={name}\r\n            placeholder={label}\r\n            containerClassName={`flex flex-col gap-y-1 ${className}`}\r\n            labelClassName=\"text-gray-600 font-semibold\"\r\n            inputClassName={`border-2 rounded px-4 py-2 w-full focus:outline-none focus:ring-1`}\r\n            label={label}\r\n            type={type}\r\n            required={true}\r\n        />\r\n\r\n    );\r\n}\r\n\r\ninterface SignUpFieldProps {\r\n    name: string;\r\n    type: string;\r\n    label: string;\r\n    className?: string;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}