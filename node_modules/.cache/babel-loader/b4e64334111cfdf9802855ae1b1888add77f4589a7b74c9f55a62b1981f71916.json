{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\'NEO'\\\\Desktop\\\\tdp darbs\\\\Frontend\\\\frontend_dala\\\\src\\\\components\\\\forms\\\\SignInForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { FormikForm } from './FormikForm';\nimport * as yup from 'yup';\nimport { FormInput } from './inputs/FormInput';\nimport { api } from '../../config/request';\nimport { FormCheckbox } from './inputs/FormCheckbox';\nimport { loginErrors } from '../../config/serverErrors';\nimport { processServerErrors } from '../../config/serverErrors';\nimport { AuthContext } from '../../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SignInForm = props => {\n  _s();\n  const [generalError, setGeneralError] = React.useState(null);\n  const {\n    getAuthStatus\n  } = useContext(AuthContext);\n  const initialValues = {\n    email: '',\n    password: '',\n    remember: false\n  };\n  const validationSchema = {\n    email: yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: yup.string().required('Password is required')\n  };\n  const onSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    setGeneralError(null);\n    api.post('/login', values).then(async () => {\n      props.closeModal();\n      await getAuthStatus();\n      actions.setSubmitting(false);\n    }).catch(err => {\n      const serverError = processServerErrors(err, actions, setGeneralError, loginErrors);\n      if (!serverError) {\n        setGeneralError(loginErrors['AUTH_ERROR'].msg);\n      }\n      actions.setSubmitting(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(FormikForm, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    submitText: \"Sign in\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 flex flex-col gap-y-3\",\n      children: [generalError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-800 text-center py-1.5 px-1 bg-red-200 rounded\",\n        children: generalError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(SignInField, {\n        name: \"email\",\n        type: \"email\",\n        label: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SignInField, {\n        name: \"password\",\n        type: \"password\",\n        label: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormCheckbox, {\n        name: \"remember\",\n        label: \"Remember me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(SignInForm, \"TYAZUAtafVTPJvhce2r//9r8/gM=\");\n_c = SignInForm;\nconst SignInField = _ref => {\n  let {\n    name,\n    type,\n    label,\n    className\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(FormInput, {\n    name: name,\n    placeholder: label,\n    containerClassName: `flex flex-col gap-y-1 ${className}`,\n    labelClassName: \"text-gray-600 font-semibold\",\n    inputClassName: `border-2 rounded px-4 py-2 w-full focus:outline-none focus:ring-1`,\n    label: label,\n    type: type,\n    required: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_c2 = SignInField;\nvar _c, _c2;\n$RefreshReg$(_c, \"SignInForm\");\n$RefreshReg$(_c2, \"SignInField\");","map":{"version":3,"names":["React","useContext","FormikForm","yup","FormInput","api","FormCheckbox","loginErrors","processServerErrors","AuthContext","SignInForm","props","generalError","setGeneralError","useState","getAuthStatus","initialValues","email","password","remember","validationSchema","string","required","onSubmit","values","actions","setSubmitting","post","then","closeModal","catch","err","serverError","msg","SignInField","name","type","label","className"],"sources":["C:/Users/'NEO'/Desktop/tdp darbs/Frontend/frontend_dala/src/components/forms/SignInForm.tsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { FormikForm } from './FormikForm';\r\nimport * as yup from 'yup';\r\nimport { FormInput } from './inputs/FormInput';\r\nimport { api } from '../../config/request';\r\nimport { FormCheckbox } from './inputs/FormCheckbox';\r\nimport { loginErrors } from '../../config/serverErrors';\r\nimport { processServerErrors } from '../../config/serverErrors';\r\nimport { AuthContext, AuthContextType } from '../../context/AuthContext';\r\n\r\nexport const SignInForm: React.FC<SignInFormProps> = (props) => {\r\n    const [generalError, setGeneralError] = React.useState<string | null>(null);\r\n    const { getAuthStatus } = useContext(AuthContext) as AuthContextType;\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const validationSchema = {\r\n        email: yup\r\n            .string()\r\n            .email('Email must be a valid email address')\r\n            .required('Email is required'),\r\n        password: yup\r\n            .string()\r\n            .required('Password is required'),\r\n    }\r\n\r\n    const onSubmit = (values: any, actions: any) => {\r\n        actions.setSubmitting(true);\r\n        setGeneralError(null);\r\n\r\n        api.post('/login', values).then(async () => {\r\n            props.closeModal();\r\n            await getAuthStatus();\r\n            actions.setSubmitting(false);\r\n        }).catch((err) => {\r\n            const serverError = processServerErrors(err, actions, setGeneralError, loginErrors);\r\n            if (!serverError) {\r\n                setGeneralError(loginErrors['AUTH_ERROR' as keyof typeof loginErrors].msg);\r\n            }\r\n            actions.setSubmitting(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <FormikForm\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n            submitText=\"Sign in\"\r\n        >\r\n            <div className=\"mt-6 flex flex-col gap-y-3\">\r\n                {generalError && <div className=\"text-red-800 text-center py-1.5 px-1 bg-red-200 rounded\">{generalError}</div>}\r\n                <SignInField name=\"email\" type=\"email\" label=\"Email\" />\r\n                <SignInField name=\"password\" type=\"password\" label=\"Password\" />\r\n                <FormCheckbox name=\"remember\" label=\"Remember me\" />\r\n            </div>\r\n        </FormikForm>\r\n    );\r\n};\r\n\r\nconst SignInField = ({ name, type, label, className }: SignInFieldProps) => {\r\n    return (\r\n        <FormInput\r\n            name={name}\r\n            placeholder={label}\r\n            containerClassName={`flex flex-col gap-y-1 ${className}`}\r\n            labelClassName=\"text-gray-600 font-semibold\"\r\n            inputClassName={`border-2 rounded px-4 py-2 w-full focus:outline-none focus:ring-1`}\r\n            label={label}\r\n            type={type}\r\n            required={true}\r\n        />\r\n\r\n    );\r\n}\r\n\r\ninterface SignInFieldProps {\r\n    name: string;\r\n    type: string;\r\n    label: string;\r\n    className?: string;\r\n}\r\n\r\ninterface SignInFormProps {\r\n    closeModal: () => void;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}